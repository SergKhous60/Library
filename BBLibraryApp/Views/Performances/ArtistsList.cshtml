@inject IAuthorizationService AuthorizationService

@model ArtistsListInfo

@{
    ViewData["Title"] = "Chart Details";
}

<div>
    <h2 class="text-info">@Model.Chart.ChartName</h2>

    <div asp-validation-summary="ModelOnly"></div>
    <table class="table table-bordered table-condensed table-striped table-sm">
        <tr>
            <th>
                @Html.DisplayNameFor(model => @Model.Chart.Composer)
            </th>
            <td>
                @Html.DisplayFor(model => @Model.Chart.Composer)
            </td>
        </tr>
        <tr>
            <th>
                @Html.DisplayNameFor(model => @Model.Chart.Arranger)
            </th>
            <td>
                @Html.DisplayFor(model => @Model.Chart.Arranger)
            </td>
        </tr>
        <tr>
            <th>
                @Html.DisplayNameFor(model => @Model.Chart.Length)
            </th>
            <td>
                @Html.DisplayFor(model => @Model.Chart.Length)
            </td>
        </tr>
    </table>
</div>

<hr>
<h4>Instrumentation</h4>
<table class="table table-bordered table-striped table-condensed table-sm">

    @foreach (var item in @Model.InstrumentPeopleInfo.OrderBy(i => i.ScoreOrder))
    {
        <tr>
            <td>@item.Instrument.InstrumentName</td>
            <td>@item.Person.FullName</td>
        </tr>
    }

</table>
<div>
    @if (User.Identity.IsAuthenticated && (await AuthorizationService.AuthorizeAsync(User, "AdministratorOnly")).Succeeded)
    {
        <a asp-action="EditArtistsList" asp-route-id="@Model.Chart.ID"
           asp-route-performanceId="@Model.PerformanceID">Edit Artists List</a> @:|
}
    <a asp-action="Details" asp-route-id="@Model.PerformanceID">Back to List</a>
</div>