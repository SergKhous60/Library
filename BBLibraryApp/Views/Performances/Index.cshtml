@inject IAuthorizationService AuthorizationService

@model PagedResult<Performance>

@{
    ViewData["Title"] = "Performances";
}

<h2>Performances</h2>
@if (User.Identity.IsAuthenticated && (await AuthorizationService.AuthorizeAsync(User, "AdministratorOnly")).Succeeded)
{
    <p>
        <a asp-action="Create">Create New</a>
    </p>
}

@if (ViewBag.Performances != 0)
{
    <form asp-action="Index" method="get" class="form-inline">
        <div class="form-check bg-light p-0">
            <p>
                Find by Performance Name,Venue Name or Date:
                <input class="p-1" type="text" name="SearchString" placeholder="filter" value="@ViewData["CurrentFilter"]" />
                <input type="submit" value="Search" class="btn btn-secondary" />
                <a asp-action="Index">Back to Full List</a>
            </p>
        </div>
    </form>


    @(await Component.InvokeAsync<PagerViewComponent>(Model))

    <table class="table table-sm table-bordered table-striped">
        <thead>
            <tr class="">
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewData["Name"]"
                       asp-route-currentFilter="@ViewData["CurrentFilter"]">Performance Name</a>
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewData["Date"]"
                       asp-route-currentFilter="@ViewData["CurrentFilter"]">Date</a>
                </th>
                <th>
                    Comments
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewData["Venue"]"
                       asp-route-currentFilter="@ViewData["CurrentFilter"]">Venue</a>
                </th>
                @if (User.Identity.IsAuthenticated && (await AuthorizationService.AuthorizeAsync(User, "AdministratorOnly")).Succeeded)
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Results)
            {
            <tr>
                <td>
                    <a asp-action="Details" asp-route-id="@item.ID">
                        @Html.DisplayFor(modelItem => item.Name)
                    </a>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ShortComments)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Venue.VenueName)
                </td>
                @if (User.Identity.IsAuthenticated && (await AuthorizationService.AuthorizeAsync(User, "AdministratorOnly")).Succeeded)
                {
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                    </td>
                }
            </tr>
            }
        </tbody>
    </table>
}
else
{

}
